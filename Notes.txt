Spring Core

	1. Архитектурный подход IoC - Inversion of control, при использовании которого мы не создаём объекты вручную внутри какого-то объекта,
	а поставляем их из вне (обычно по средствам AppContext/Dependency Injection)
	
	Типы bean'ов:
	- default: singleton - создание одного экземпляра
	- prototype - создание отдельного экземпляра для каждого вызова getBean (не вызывается destroy-method)
	
	
	смена типа бина: scope="<value>"
	
	Жизненый цикл bean'а:
	
	Запуск приложения -> Запусккается контейнер Spring -> Создаётся объект бина -> Внедрение зависимостей -> 
	Вызов init-method -> использование -> Вызов destroy-method -> Остановка приложения
	
	2. @Autowired позволяет заполнить зависимость автоматически, но если вдруг сущестуют более одного бина который подходит,
	то возникнет исключение. Дабы этого избежать требуется так-же аннотация @Qualifier("<beanName>")

Spring MVC

	Один из компонентов Spring Framework, позволяет разрабатывть web-приложения на Java. Предпологает использование архитектуры Model-View-Controller.
	1. Контроллер тоже компонент - но с дополнительными возможностями
	2. GetMapping, PostMapping, PutMapping, DeleteMapping, PathcMapping - где первое слово подразумевает тип HTTP запроса.
	Устаревший вариант - @RequestMapping(method = RequestMethod.GET), но его можно использовать на классе, тогда это не устаревший тип.
	В случае класса - все его методы тогда будут иметь префикс перед ресурсом который указан аннотацией на классе.