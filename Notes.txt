Spring Core

	1. Архитектурный подход IoC - Inversion of control, при использовании которого мы не создаём объекты вручную внутри какого-то объекта,
	а поставляем их из вне (обычно по средствам AppContext/Dependency Injection)
	
	Типы bean'ов:
	- default: singleton - создание одного экземпляра
	- prototype - создание отдельного экземпляра для каждого вызова getBean (не вызывается destroy-method)
	
	
	смена типа бина: scope="<value>"
	
	Жизненый цикл bean'а:
	
	Запуск приложения -> Запусккается контейнер Spring -> Создаётся объект бина -> Внедрение зависимостей -> 
	Вызов init-method -> использование -> Вызов destroy-method -> Остановка приложения
	
	2. @Autowired позволяет заполнить зависимость автоматически, но если вдруг сущестуют более одного бина который подходит,
	то возникнет исключение. Дабы этого избежать требуется так-же аннотация @Qualifier("<beanName>")

Spring MVC

	Один из компонентов Spring Framework, позволяет разрабатывть web-приложения на Java. Предпологает использование архитектуры Model-View-Controller.
	1. Контроллер тоже компонент - но с дополнительными возможностями
	2. GetMapping, PostMapping, PutMapping, DeleteMapping, PathcMapping - где первое слово подразумевает тип HTTP запроса.
	Устаревший вариант - @RequestMapping(method = RequestMethod.GET), но его можно использовать на классе, тогда это не устаревший тип.
	В случае класса - все его методы тогда будут иметь префикс перед ресурсом который указан аннотацией на классе.
	3. Дабы получить переменные запроса GET/POST можно использовать два варианта:
		- В методе в качестве аргумента указать класс HttpServletRequest, из которого посредством HttpServletRequest#getParameter можно получить переменную.
		- Указать взодные аргументы нужного типа и пометить аннотацией @RequestParam, в которой можно указать значения name/value для имени (опционально),
	и обязательность (required). По умолчанию все параметры required, сервер ответить HTTP 400 Bad Request в случае остутствия.
	4. Для взаимодействия с модельно в методе необходимо указать аргументом на прём тип Model, в который уже можно указать аргументы в виде ключ-значение.
	Thymeleaf вставка аргумента: <html xmlns:th="http://www.w3.org/1999/xhtml"><p th:text="${result}"/> 
	
	CRUD - методология взаимодействия с базой данных: CREATE, READ, UPDATE, DELETE
	REST - паттерн проектирования, задающий стандарт реализации веб-приложений
	По конвенции если речь идёт об взаимодействии объекта X, то URL должен быть во множественном числе: post -> /posts
	DAO - Data Access Object, вынесение логики обращения к БД с отдельный класс (В них пишется SQL код). Альтернативный паттерн - Repository
	5. Аннотация PathVariable позволяет получить значение из URL: /{var_name}/../ @PathVariable("var_name") String name
	6. Аннотация ModelAttribute позволяет создать объект на основании данных запроса, 
	где отсутствующие поля будут заполнены по умолчанию, и затем помещает под нужным ключём в модель. 